{
	"info": {
		"_postman_id": "ea071471-d877-4866-9fb5-1db618672282",
		"name": "Postman Projetct",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43605623",
		"_collection_link": "https://bozhidar-5844323.postman.co/workspace/Bozhidar's-Workspace~af04bf80-b0d3-4d71-8509-63ee459d6fc1/collection/43605623-ea071471-d877-4866-9fb5-1db618672282?action=share&source=collection_link&creator=43605623"
	},
	"item": [
		{
			"name": "API Doc",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Authentication LogIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login is successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var json = pm.response.json();\r",
											"\r",
											"    pm.expect(json.username).to.eql(pm.iterationData.get(\"username\"));\r",
											"    pm.expect(json).to.have.property(\"accessToken\");\r",
											"    pm.expect(json.accessToken.length).to.be.above(100);\r",
											"\r",
											"    // Save the access token to environment\r",
											"    pm.environment.set(\"authToken\", json.accessToken);\r",
											"    // Save the refresh token to the environment\r",
											"    pm.environment.set(\"refreshToken\", json.refreshToken);\r",
											"    // Save the user ID to environment\r",
											"    pm.environment.set(\"userId\", json.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n  //\"expiresInMins\": 30 //optional, defaults to 60\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}auth/login",
									"host": [
										"{{BaseURL}}auth"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "Product Lifecycle",
					"item": [
						{
							"name": "all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.response.to.have.status(200);\r",
											"pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"pm.expect(pm.response.text()).to.not.be.empty;\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users",
									"host": [
										"{{BaseURL}}users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has valid product properties\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"    pm.expect(jsonData).to.have.property(\"products\");\r",
											"    pm.expect(jsonData.products).to.be.an(\"array\").that.is.not.empty;\r",
											"\r",
											"    const firstProduct = jsonData.products[0];\r",
											"    pm.expect(firstProduct).to.have.property(\"id\");\r",
											"    pm.expect(firstProduct).to.have.property(\"title\");\r",
											"    pm.expect(firstProduct).to.have.property(\"price\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}products",
									"host": [
										"{{BaseURL}}products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the response schema for required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('id');\r",
											"    pm.expect(responseData).to.have.property('title');\r",
											"    /*pm.expect(responseData).to.have.property('price');\r",
											"    pm.expect(responseData).to.have.property('discountPercentage');\r",
											"    pm.expect(responseData).to.have.property('stock');\r",
											"    pm.expect(responseData).to.have.property('rating');\r",
											"    pm.expect(responseData).to.have.property('images');\r",
											"    pm.expect(responseData).to.have.property('thumbnail');\r",
											"    pm.expect(responseData).to.have.property('description');\r",
											"    pm.expect(responseData).to.have.property('brand');\r",
											"    pm.expect(responseData).to.have.property('category'); \r",
											"    can make these not mendatory?*/\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Nothing but a J thang\",\r\n        \"description\": \"By Snoop Dogy Dog\",\r\n        \"category\": \"beauty\",\r\n        \"price\": 9.99,\r\n        \"discountPercentage\": 7.17,\r\n        \"rating\": 4.94,\r\n        \"stock\": 5,\r\n        \"brand\": \"Essence\",\r\n        \"images\": [\r\n            \"https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/1.png\"\r\n        ],\r\n        \"thumbnail\": \"https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/thumbnail.png\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}products/add",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify the request method is PUT\r",
											"pm.test(\"Verify request method is PUT\", function () {\r",
											"    pm.expect(pm.request.method).to.equal(\"PUT\");\r",
											"});\r",
											"\r",
											"// Verify the response status code is 200\r",
											"pm.test(\"Verify response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Verify the updated product title in the response body\r",
											"pm.test(\"Verify updated product title in the response body\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.title).to.equal(\"iPhone Galaxy +1\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"iPhone Galaxy +1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}products/1",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verify the response status code is 200\r",
											"pm.test(\"Verify response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// Verify the response body is valid JSON\r",
											"pm.test(\"Response body should be a valid JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"// Verify the product title in the response body\r",
											"pm.test(\"Verify the product title in the response\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response.title).to.equal(\"Essence Mascara Lash Princess\");\r",
											"});\r",
											"\r",
											"// Verify the presence of 'category' and 'price' fields in the response body\r",
											"pm.test(\"Verify the presence of 'category' and 'price' fields\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.have.property('category');\r",
											"    pm.expect(response).to.have.property('price');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"iPhone Galaxy +1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}products/1",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 300ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"// Test for validating the response body properties\r",
											"pm.test(\"Response body has products, total, skip, and limit properties\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('products');\r",
											"    pm.expect(responseBody).to.have.property('total');\r",
											"    pm.expect(responseBody).to.have.property('skip');\r",
											"    pm.expect(responseBody).to.have.property('limit');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}products?sortBy=title&order=desc",
									"host": [
										"{{BaseURL}}products"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "title"
										},
										{
											"key": "order",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all products categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Test for response body schema and properties\r",
											"pm.test(\"Response has valid schema and properties\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.an('array').that.is.not.empty;\r",
											"    pm.expect(response[0]).to.have.property('slug');\r",
											"    pm.expect(response[0]).to.have.property('name');\r",
											"    pm.expect(response[0]).to.have.property('url');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}products/categories",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// Test for response body schema/properties\r",
											"pm.test(\"Response body has specific properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"    pm.expect(pm.response.json()).to.have.property('title');\r",
											"    pm.expect(pm.response.json()).to.have.property('price');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}products/1",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Management",
					"item": [
						{
							"name": "LogIn User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login is successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"accessToken\");\r",
											"    pm.expect(jsonData.accessToken).to.be.a('string');\r",
											"    pm.expect(jsonData).to.have.property(\"refreshToken\");\r",
											"    pm.expect(jsonData.refreshToken).to.be.a('string');\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData.id).to.be.a('number');\r",
											"    pm.expect(jsonData).to.have.property(\"username\");\r",
											"    pm.expect(jsonData.username).to.eql(\"emilys\");\r",
											"    pm.expect(jsonData).to.have.property(\"email\");\r",
											"    pm.expect(jsonData.email).to.be.a('string');\r",
											"    pm.expect(jsonData).to.have.property(\"firstName\");\r",
											"    pm.expect(jsonData.firstName).to.be.a('string');\r",
											"    pm.expect(jsonData).to.have.property(\"lastName\");\r",
											"    pm.expect(jsonData.lastName).to.be.a('string');\r",
											"    pm.expect(jsonData).to.have.property(\"gender\");\r",
											"    pm.expect(jsonData.gender).to.be.a('string');\r",
											"    pm.expect(jsonData).to.have.property(\"image\");\r",
											"    pm.expect(jsonData.image).to.be.a('string');\r",
											"    pm.expect(jsonData.accessToken.length).to.be.above(100);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"emilys\",\r\n  \"password\": \"emilyspass\"\r\n  //\"expiresInMins\": 30 //optional, defaults to 60\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}user/login",
									"host": [
										"{{BaseURL}}user"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Check if the response status is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2: Validate the content type of the response\r",
											"pm.test(\"Content type is application/json\", function () {\r",
											"    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"// Test 3: Verify the structure and properties of the response body\r",
											"pm.test(\"Response body has the expected structure and properties\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.users).to.be.an('array').that.is.not.empty;\r",
											"    pm.expect(responseBody.total).to.exist;\r",
											"    pm.expect(responseBody.skip).to.exist;\r",
											"    pm.expect(responseBody.limit).to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/search?q=John",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "John"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has the correct structure\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody.users).to.be.an('array').that.is.not.empty;\r",
											"    pm.expect(responseBody.total).to.exist;\r",
											"    pm.expect(responseBody.skip).to.exist;\r",
											"    pm.expect(responseBody.limit).to.exist;\r",
											"});\r",
											"\r",
											"// Test for filtering users based on hair color\r",
											"pm.test(\"Filter users by hair color\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    responseBody.users.forEach(user => {\r",
											"        pm.expect(user.hair.color).to.equal(\"Black\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/filter?key=hair.color&value=Black",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"filter"
									],
									"query": [
										{
											"key": "key",
											"value": "hair.color"
										},
										{
											"key": "value",
											"value": "Black"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Test to check if the response body contains users with brown hair color\r",
											"pm.test(\"The response contains users only with brown hair color\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    pm.expect(responseData.users).to.be.an('array').that.is.not.empty;\r",
											"    responseData.users.forEach(function(user) {\r",
											"        pm.expect(user.hair.color).to.equal(\"Brown\");\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/filter?key=hair.color&value=Brown",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"filter"
									],
									"query": [
										{
											"key": "key",
											"value": "hair.color"
										},
										{
											"key": "value",
											"value": "Brown"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all posts tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"// Test for response body schema and properties\r",
											"pm.test(\"Response body has valid schema and properties\", function () {\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response).to.be.an('array');\r",
											"    pm.expect(response).to.have.lengthOf(170); // Assuming the response always contains 2 elements\r",
											"    pm.expect(response[0]).to.have.property('slug');\r",
											"    pm.expect(response[0]).to.have.property('name');\r",
											"    pm.expect(response[0]).to.have.property('url');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}posts/tags",
									"host": [
										"{{BaseURL}}posts"
									],
									"path": [
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user’s posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test 1: Check if the response status is 200\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test 2: Validate the structure of the response body\r",
											"pm.test(\"Response body has posts, total, skip, and limit\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.have.property('posts');\r",
											"    pm.expect(responseBody.posts).to.be.an('array').that.is.not.empty;\r",
											"    pm.expect(responseBody).to.have.property('total', 2);\r",
											"    pm.expect(responseBody).to.have.property('skip', 0);\r",
											"    pm.expect(responseBody).to.have.property('limit', 2);\r",
											"});\r",
											"\r",
											"// Test 3: Validate the properties of each post in the response\r",
											"pm.test(\"Validate the properties of each post\", function () {\r",
											"    const responseBody = pm.response.json();\r",
											"    responseBody.posts.forEach((post) => {\r",
											"        pm.expect(post).to.have.property('id');\r",
											"        pm.expect(post.id).to.be.a('number');\r",
											"        pm.expect(post).to.have.property('title');\r",
											"        pm.expect(post.title).to.be.a('string');\r",
											"        pm.expect(post).to.have.property('body');\r",
											"        pm.expect(post.body).to.be.a('string');\r",
											"        pm.expect(post).to.have.property('tags');\r",
											"        pm.expect(post.tags).to.be.an('array').that.is.not.empty;\r",
											"        pm.expect(post).to.have.property('reactions');\r",
											"        pm.expect(post.reactions).to.have.property('likes');\r",
											"        pm.expect(post.reactions.likes).to.be.a('number');\r",
											"        pm.expect(post.reactions).to.have.property('dislikes');\r",
											"        pm.expect(post.reactions.dislikes).to.be.a('number');\r",
											"        pm.expect(post).to.have.property('views');\r",
											"        pm.expect(post.views).to.be.a('number');\r",
											"        pm.expect(post).to.have.property('userId');\r",
											"        pm.expect(post.userId).to.be.a('number');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/5/posts",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"5",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user’s todos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test for status code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Test for response time\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.lessThan(200);\r",
											"});\r",
											"\r",
											"// Test for response body properties\r",
											"pm.test(\"Response body has 'todos' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('todos');\r",
											"});\r",
											"pm.test(\"Response body has 'total' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('total');\r",
											"});\r",
											"pm.test(\"Response body has 'skip' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('skip');\r",
											"});\r",
											"pm.test(\"Response body has 'limit' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('limit');\r",
											"});\r",
											"\r",
											"// Test for 'todos' array elements\r",
											"pm.test(\"Each todo item has 'id', 'todo', 'completed', and 'userId' properties\", function () {\r",
											"    pm.response.json().todos.forEach(function (todo) {\r",
											"        pm.expect(todo).to.have.property('id');\r",
											"        pm.expect(todo).to.have.property('todo');\r",
											"        pm.expect(todo).to.have.property('completed');\r",
											"        pm.expect(todo).to.have.property('userId');\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/8/todos",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"8",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.sendRequest({\r",
											"    url: '{{BaseURL}}users/15',\r",
											"    method: 'DELETE',\r",
											"}, function (err, res) {\r",
											"    pm.test(\"Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/15",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"15"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request was successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"NewName34\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}users/34",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"34"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "NEG_Auth_User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login failed with missing username\", function () {\r",
											"    if (pm.response.status === 400) {\r",
											"        pm.expect(pm.response.json().message).to.eql(\"Username is required\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"ezio\",\r\n  \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}auth/login",
									"host": [
										"{{BaseURL}}auth"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Auth_Pass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login failed with wrong password\", function () {\r",
											"    if (pm.response.status === 400) {\r",
											"        pm.expect(pm.response.json().message).to.eql(\"Invalid password\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"lalallalal\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}auth/login",
									"host": [
										"{{BaseURL}}auth"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Product Lifecycle",
					"item": [
						{
							"name": "NEG_Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for invalid endpoint\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}productz",
									"host": [
										"{{BaseURL}}productz"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Add new product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should not create a valid product with empty fields\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"\r",
											"    const res = pm.response.json();\r",
											"    pm.expect(res).to.have.property(\"id\");\r",
											"    pm.expect(Object.keys(res).length).to.equal(1); // only 'id' is returned, nothing else\r",
											"\r",
											"    // This tells us: product was technically 'created', but no real content was saved\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}products/add",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Update a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for updating non-existent product\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Invalid Update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}products/9999999",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"9999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Get a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 400 or 404 for invalid product ID\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}products/9999999",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"9999999"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Sort products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return valid error or default sort behavior\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 200]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}products?sortBy=nonExistent&order=desc",
									"host": [
										"{{BaseURL}}products"
									],
									"query": [
										{
											"key": "sortBy",
											"value": "nonExistent"
										},
										{
											"key": "order",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Get all categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for invalid category endpoint\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}products/categoriez",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"categoriez"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Delete Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 when trying to delete non-existent product\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}products/99999",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"99999"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "User Management",
					"item": [
						{
							"name": "NEG_LogIn User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should reject invalid login\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.expect(pm.response.json().message).to.include(\"Invalid\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"invalidUsername\",\r\n  \"password\": \"invalidPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}user/login",
									"host": [
										"{{BaseURL}}user"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Search users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Search with empty query returns unfiltered list\", function () {\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.property(\"users\");\r",
											"    pm.expect(res.users.length).to.be.greaterThan(0);\r",
											"\r",
											"    // Optionally warn that this isn't strict filtering\r",
											"    if (res.total >= 30) {\r",
											"        console.warn(\"Empty query returned full user list — backend does not enforce search param.\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/search?q=",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Filter users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return no users for invalid filter key\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.property(\"users\").that.is.an(\"array\").that.is.empty;\r",
											"    pm.expect(res.total).to.eql(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/filter?key=invalid&value=Black",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"filter"
									],
									"query": [
										{
											"key": "key",
											"value": "invalid"
										},
										{
											"key": "value",
											"value": "Black"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Sort users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return empty result for unsupported nested filter\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const res = pm.response.json();\r",
											"\r",
											"    pm.expect(res).to.have.property(\"users\").that.is.an(\"array\").that.is.empty;\r",
											"    pm.expect(res.total).to.eql(0);\r",
											"    console.warn(\"Nested filters like 'hair.color' return no matches — possibly unsupported in DummyJSON.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/filter?key=hair.color&value=invalid",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"filter"
									],
									"query": [
										{
											"key": "key",
											"value": "hair.color"
										},
										{
											"key": "value",
											"value": "invalid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Get all posts tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid endpoint returns 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}posts/tass",
									"host": [
										"{{BaseURL}}posts"
									],
									"path": [
										"tass"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Get user’s posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return 404 for user with no posts\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/9999/posts",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"9999",
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Get user’s todos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should return error for invalid user ID\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/999/todos",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"999",
										"todos"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_Delete users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Should fail with string ID\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 404]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/fifteen",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"fifteen"
									]
								}
							},
							"response": []
						},
						{
							"name": "NEG_New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Non-existent user should return 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}users/999",
									"host": [
										"{{BaseURL}}users"
									],
									"path": [
										"999"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://dummyjson.com/",
			"type": "string"
		}
	]
}