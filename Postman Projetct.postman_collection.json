{
	"info": {
		"_postman_id": "ea071471-d877-4866-9fb5-1db618672282",
		"name": "Postman Projetct",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43605623",
		"_collection_link": "https://bozhidar-5844323.postman.co/workspace/Bozhidar's-Workspace~af04bf80-b0d3-4d71-8509-63ee459d6fc1/collection/43605623-ea071471-d877-4866-9fb5-1db618672282?action=share&source=collection_link&creator=43605623"
	},
	"item": [
		{
			"name": "API Doc",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Authentication LogIn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login is successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    var json = pm.response.json();\r",
											"\r",
											"    pm.expect(json.username).to.eql(pm.iterationData.get(\"username\"));\r",
											"    pm.expect(json).to.have.property(\"accessToken\");\r",
											"    pm.expect(json.accessToken.length).to.be.above(100);\r",
											"\r",
											"    // Save the access token to environment\r",
											"    pm.environment.set(\"authToken\", json.accessToken);\r",
											"    // Save the refresh token to the environment\r",
											"    pm.environment.set(\"refreshToken\", json.refreshToken);\r",
											"    // Save the user ID to environment\r",
											"    pm.environment.set(\"userId\", json.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n  //\"expiresInMins\": 30 //optional, defaults to 60\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}auth/login",
									"host": [
										"{{BaseURL}}auth"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Product",
					"item": [
						{
							"name": "Get single product",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}products/:id",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1",
											"description": "product id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the response schema for required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.property('id');\r",
											"    pm.expect(responseData).to.have.property('title');\r",
											"    /*pm.expect(responseData).to.have.property('price');\r",
											"    pm.expect(responseData).to.have.property('discountPercentage');\r",
											"    pm.expect(responseData).to.have.property('stock');\r",
											"    pm.expect(responseData).to.have.property('rating');\r",
											"    pm.expect(responseData).to.have.property('images');\r",
											"    pm.expect(responseData).to.have.property('thumbnail');\r",
											"    pm.expect(responseData).to.have.property('description');\r",
											"    pm.expect(responseData).to.have.property('brand');\r",
											"    pm.expect(responseData).to.have.property('category'); \r",
											"    can make these not mendatory?*/\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Nothing but a J thang\",\r\n     /*   \"description\": \"By Snoop Dogy Dog\",\r\n        \"category\": \"beauty\",\r\n        \"price\": 9.99,\r\n        \"discountPercentage\": 7.17,\r\n        \"rating\": 4.94,\r\n        \"stock\": 5,\r\n        \"brand\": \"Essence\",\r\n        \"images\": [\r\n            \"https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/1.png\"\r\n        ],\r\n        \"thumbnail\": \"https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/thumbnail.png\" */\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}products/add",
									"host": [
										"{{BaseURL}}products"
									],
									"path": [
										"add"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "all users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}users",
							"host": [
								"{{BaseURL}}users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication LogIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login is successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var json = pm.response.json();\r",
									"\r",
									"    pm.expect(json.username).to.eql(pm.iterationData.get(\"username\"));\r",
									"    pm.expect(json).to.have.property(\"accessToken\");\r",
									"    pm.expect(json.accessToken.length).to.be.above(100);\r",
									"\r",
									"    // Save the token to environment\r",
									"    pm.environment.set(\"authToken\", json.accessToken);\r",
									"    // Save the user ID to environment\r",
									"    pm.environment.set(\"userId\", json.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}auth/login",
							"host": [
								"{{BaseURL}}auth"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "Bozhidar's Workspace/products",
							"host": [
								"Bozhidar's Workspace"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    /*pm.expect(responseData).to.have.property('price');\r",
									"    pm.expect(responseData).to.have.property('discountPercentage');\r",
									"    pm.expect(responseData).to.have.property('stock');\r",
									"    pm.expect(responseData).to.have.property('rating');\r",
									"    pm.expect(responseData).to.have.property('images');\r",
									"    pm.expect(responseData).to.have.property('thumbnail');\r",
									"    pm.expect(responseData).to.have.property('description');\r",
									"    pm.expect(responseData).to.have.property('brand');\r",
									"    pm.expect(responseData).to.have.property('category'); \r",
									"    can make these not mendatory?*/\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Nothing but a J thang\",\r\n        \"description\": \"By Snoop Dogy Dog\",\r\n        \"category\": \"beauty\",\r\n        \"price\": 9.99,\r\n        \"discountPercentage\": 7.17,\r\n        \"rating\": 4.94,\r\n        \"stock\": 5,\r\n        \"brand\": \"Essence\",\r\n        \"images\": [\r\n            \"https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/1.png\"\r\n        ],\r\n        \"thumbnail\": \"https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/thumbnail.png\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}products/add",
							"host": [
								"{{BaseURL}}products"
							],
							"path": [
								"add"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "NEG_Auth_Pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login failed with wrong password\", function () {\r",
									"    if (pm.response.status === 400) {\r",
									"        pm.expect(pm.response.json().message).to.eql(\"Invalid password\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"password\": \"lalallalal\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}auth/login",
							"host": [
								"{{BaseURL}}auth"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEG_Auth_User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login failed with missing username\", function () {\r",
									"    if (pm.response.status === 400) {\r",
									"        pm.expect(pm.response.json().message).to.eql(\"Username is required\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"ezio\",\r\n  \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}auth/login",
							"host": [
								"{{BaseURL}}auth"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://dummyjson.com/",
			"type": "string"
		}
	]
}